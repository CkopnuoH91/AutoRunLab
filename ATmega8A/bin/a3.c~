/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.5a Evaluation
Automatic Program Generator
© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 24.04.2013
Author  : Freeware, for evaluation andnon-commercial use only
Company : 
Comments: 


Chip type               : ATmega8
Program type            : Application
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*****************************************************/

#include <mega8.h>
#include <string.h>
#include <delay.h>
#include <stdlib.h>
// Standard Input/Output functions
#include <stdio.h>

unsigned int read_adc(unsigned char adc_input);
void DiodeAI(int Imax, int Sign);
void DiodeAU(int Umax, int Sign);
void DiodeBI(int Imax, int Sign);
void DiodeBI1(int Imax, int Sign);
char k;
const int delay = 5; 
static char buf[64];
static int  i = 0;
char num[64];

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
// Place your code here
int t;

if(UCSRA.7)  
{
   k = getchar();
   buf[i] = k;
   i++;    
   if(k == 'x')
   { 
       i = 0;
       t =  atoi(strncpy(num,buf + 1,4));       
       switch (buf[0]) 
       {
          case '1' :         
           PORTD.6 = 0;
           delay_ms(500);
           TCCR1A = 0b10000001;   
           printf("%d;%d\r\n", 0, 0);                        
           DiodeAI(t*100, 1); 
           TCCR1A = 0b00000001;           
          break;
          
          case '2' :
           PORTD.6 = 1;
           delay_ms(500);
           TCCR1A = 0b10000001; 
           printf("%d;%d\r\n", 0, 0);                       
           DiodeAI(t*100,-1);
           TCCR1A = 0b00000001;  
          break;
                     
          case '3' : 
           PORTD.6 = 0;
           delay_ms(500);
           TCCR1A = 0b10000001;   
           printf("%d;%d\r\n", 0, 0);                        
           DiodeAI(t*100, 1); 
           PORTD.6 = 1; 
           printf("%d;%d\r\n", 0, 0);           
           DiodeAI(t*100,-1);
           TCCR1A = 0b00000001;                   
          break;
          
          case '4' : 
           PORTD.6 = 0;
           PORTD.7 = 0;
           delay_ms(500);
           TCCR1A = 0b10000001;
           DiodeAU(t*10,1);
           TCCR1A = 0b10100001;
           printf("%d;%d\r\n", 0, 0);
           DiodeBI(10000,1);          
           TCCR1A = 0b00000001;       
          break;   
           
          case '5' :    
           PORTD.6 = 0;
           PORTD.7 = 0;
           delay_ms(500);         
           TCCR1A = 0b00100001;
           DiodeBI1(t*10,1);
           TCCR1A = 0b10100001;
           printf("%d;%d\r\n", 0, 0);
           DiodeAI(10000,1);
           TCCR1A = 0b00000001;               
          break;
                            
          case '6' : 
           PORTD.6 = 1;
           PORTD.7 = 1;
           delay_ms(500);
           TCCR1A = 0b10000001;
           DiodeAU(t*10,1);
           TCCR1A = 0b10100001;
           printf("%d;%d\r\n", 0, 0);
           DiodeBI(10000,1);          
           TCCR1A = 0b00000001;            
          break;
          
          case '7' : 
           PORTD.6 = 1;
           PORTD.7 = 1;
           delay_ms(500);         
           TCCR1A = 0b00100001;
           DiodeBI1(t*10,1);
           TCCR1A = 0b10100001;
           printf("%d;%d\r\n", 0, 0);
           DiodeAI(10000,1);
           TCCR1A = 0b00000001;         
          break;
         
        default: 
             printf("%s", buf); 
             buf[0]='';
             buf[1]='';                    
       };  
       buf[0]='';
       buf[1]='';          
   }
    
    //strcpy(buf,"");   


}
}

#define ADC_VREF_TYPE 0x00

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=0x40;
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
ADCSRA|=0x10;
return ADCW;
}

void DiodeAI(int Imax, int Sign)
{
  for(OCR1A = 0; OCR1A < 255; OCR1A++)
  {
    int U,I;   
    delay_ms(delay);  
    
    U = read_adc(0)*4.887*2;
    I = (read_adc(1)*4.887*2 - U); 
    
    printf("%d;%d\r\n", U*Sign, abs(I)*Sign);
    if(I > Imax) 
     {           
       break;
     }    
  }  
};

void DiodeBI(int Imax, int Sign)
{
 for(OCR1B = 0; OCR1B < 255; OCR1B++) 
 {
    int U,I;   
    delay_ms(delay);  
    
    U = read_adc(2)*4.887*2;
    I = (read_adc(3)*4.887*2 - U); 
    
    printf("%d;%d\r\n", U*Sign, abs(I)*Sign);
    if(I > Imax) 
    { 
      break;
    }       
 } 
};

void DiodeAU(int Umax, int Sign)
{
 for(OCR1A = 0; OCR1A < 255; OCR1A++)
 {
   int U;   
   delay_ms(delay);  
    
   U = read_adc(0)*4.887*2;
   printf("%d\r\n", U*Sign); 
   if(U > Umax) 
   { 
     break;
   }      
 } 
};

void DiodeBI1(int Imax, int Sign)
{
 for(OCR1B = 0; OCR1B < 255; OCR1B++) 
 {
    int U,I;   
    delay_ms(delay);  
    
    U = read_adc(2)*4.887*2;
    I = (read_adc(3)*4.887*2 - U); 
    
    printf("%d\r\n", abs(I)*Sign);
    if(I > Imax) 
    { 
      break;
    }  
 } 
};

// Declare your global variables here

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=T 
PORTB=0x00;
DDRB=0x06;

// Port C initialization
// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0b11000000;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=0x00;
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 8000,000 kHz
// Mode: Fast PWM top=0x00FF
// OC1A output: Non-Inv.
// OC1B output: Non-Inv.
// Noise Canceler: On
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
//TCCR1A=0xA1;
TCCR1A = 0b00000001;
TCCR1B=0x89;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1A=0;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x04;

// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=0x00;
UCSRB=0x18;
UCSRC=0x86;
UBRRH=0x00;
UBRRL=0x33;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC Clock frequency: 1000,000 kHz
// ADC Voltage Reference: AREF pin
ADMUX=ADC_VREF_TYPE & 0xff;
//ADCSRA=0x83;
ADCSRA=0b10000111;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Global enable interrupts
#asm("sei")

while (1)
      {
      // Place your code here
      // #asm("sleep");
      

      
       
      }
}
